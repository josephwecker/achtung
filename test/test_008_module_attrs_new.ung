
## Main erlang module attributes
@module
@package
@parameters

@file
@export
@import   ~~~  # two types- one for functions into current namespace, and one for other packages in the current package-space
@compile ~~~
@behaviour # / behavior
@version  # Instead of -vsn(...)
@type
@opaque
@export_type
@record

## Preprocessor directives
@include  ~~~  # But similar to the rejected edoc tag "@uses"...
@include_lib ~~~

# Way to unify import/include/include_lib/import_all/(uses) ...?

@define   ~~~
@undef    ~~~
@ifdef    ~~~
@ifndef   ~~~
@else     ~~~
@endif    ~~~

## Brainstorm...
@generate_docs
@dialyzer
@profile #(functions)
@debug_info
@breakpoint
@no_warn_unused

## edoc ones
@author        # module* | function*(new)
@copyright     # module
@deprecated    # module  | function
@doc           # module  | function
@docfile       # module* | function*
@equiv         #           function
@headerfile    # module* | function*
@hidden        # module  | function
@license       # module
@param         #           function*
@private       # module  | function
@reference     # module* | function*
@returns       #           function
@see           # module* | function*
@since         # module  | function
@spec          #           function(*?)
@throws        #           function(*?)
@todo          # module* | function*
@type          # module*
@version       # module

myfunction
  # Function flags
  @deprecated
  @inline
  @hidden
  @private # ???
  @export

  # Single instance
  @doc There seems to be some good stuff here
    wouldn't you say?
  @equiv # instead of doc
  @docfile
  @headerfile
  @docfile
  @license
  @see
  @since
  @spec # ???
  @throws
  @todo
  @spec |(X:atom int)|-> X
  @param
  @returns

  |(X:atom _N) |-> X

  :[Y:number]  :-> Y
  |[Y:number]  |-> Y

# module / package / overview
# module / package / overview / single
# module / function / package / single
# module / function / package / overview
# module / function / package / overview / single
# ALL (?)
# function / single
# module / function / single
# function
# module / footer / package / overview
# overview / single

#|# From edoc source code

    [{author, fun parse_contact/4, [module,package,overview]},
     {copyright, text, [module,package,overview,single]},
     {deprecated, xml, [module,function,package,single]},
     {doc, xml,	[module,function,package,overview,single]},
     {docfile, fun parse_file/4, All},
     {'end', text, All},
     {equiv, fun parse_expr/4, [function,single]},
     {headerfile, fun parse_header/4, All},
     {hidden, text, [module,function,single]},
     license
     {param, fun parse_param/4, [function]},
     {private, text, [module,function,single]},
     {reference, xml, [module,footer,package,overview]},
     {returns, xml, [function,single]},
     {see, fun parse_see/4, [module,function,package,overview]},
     {since, text, [module,function,package,overview,single]},
     {spec, fun parse_spec/4, [function,single]},
     {throws, fun parse_throws/4, [function,single]},
     {title, text, [overview,single]},
     {'TODO', xml, All},
     {todo, xml, All},
     {type, fun parse_typedef/4, [module,footer,function]},
     {version, text, [module,package,overview,single]}].
|#
