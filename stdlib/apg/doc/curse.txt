#|e  <- T:f+ [@] V:f+ -> $T $V
f  <- [a-z] [0-9]

e  <=- [a-z] [0-9] -{e-T} s1
s1 <=- [a-z] [0-9] -{e-T} s1 ║ [@]-{~} [a-z] [0-9] -{e-V} s2
s2 <=- [a-z] [0-9] -{e-V} s2 ║ ɛ-{|($T $V)|}

a/b/c
a⌿b⌿c
a⑊b⑊c /d/e
e ← [a] e / [a]
⌿/
e <= [a] e-{|e|} / [a]-{|e|} ʃ 
|#


yield: finishes and returns context
eof:   matches end of input
fin:   eof if no characters left, otherwise yield
-----

e ← ([a] e [b] / [c]) fin   || (1)
# Informally: a{n}> c <b{n}
e ← ([a] e [b] / [a]) fin   || (2)
# Informally: a{n}> a <b{n}
e ← ([a] e [a] / [a]) fin   || (3)
# Informally: a{n}> a <a{n}

#*** {n} means run that many times successfully- not necessarily # consumed.

e ← ([a] e [b] / [c]) fin   || (1)
=> 'c' | 'acb' | 'aacbb' | 'aaacbbb'
/> 'acba' | 'ab'


{{'a','c'}}
if i[1,()]='a' → left  IOU('a',__) {{'a','c'}}
if i[1,()]='c' → right {{fin}}

{{'a','c'}}
if i[2,('a',__)]='a' → left  PAY('a',('a',__)) {{'a','b','c'}}
if i[2,('a',__)]='c' → right PAY('a','c') {{'b'}}


# Informally: a{n}> c <b{n}
=>> 'acb'
i1{'a',1,[]} →Left side only




---------------
e ← [a] [b] [c]-{left} / [a] [b]-{right}
  ← [a] [b] ([c]-{left} / -{right})


e ← v:([a] e [a] / [a]) fin →$v
  ← [a] e [a]-{v} fin-{|e|} / [a]-{v} fin-{|e|}
  ← [a]   (e [a] {v} fin {|e|} ⑊ ɛ {v} fin {|e|})

  ← [a]   (e [a] {v} fin {|e|} ⑊ fin {v} {|e|})  # Collapse can move to the right of non-consuming

  ← [a]   (e [a] fin {v} {|e|} ⑊ fin {v} {|e|})
      ok    ^                     ^
#           This one?             Or this one? - I need as many finishes as starts + 1


--------------

R←a R a / a →$_

 ←a R a《R》
  /a《R》

 ←a (a R a《R》/ a《R》) R a《R》
  /a《R》

 ←a (a R a《R》/ a《R》) R a《R》
  /a《R》

---------------
R ← a R a / a
I1='a'
(i1,'a',[]) => succ on left


a a a a a a a a a

(a(a(a(a(a(a(a(a(a(
                   ^
(a(a(a(a(a(a(a(a(a)
                 ^
(a(a(a(a(a(a(a(a)a)
               ^
(a(a(a(a(a(a(a)a)a)
             ^
(a(a(a(a(a(a)a)a)a)
           ^
(a(a(a(a(a)a)a)a)a)    < If next is fin
         ^
fin after a*0|→            (_)ϝ
fin after a*1|→            (a)
fin after a*2|→      (a (a) _) ϝ
fin after a*3|→      (a (a) a)
fin after a*4|→(a (a (a) a) _) ϝ
fin after a*5|→(a (a (a) a) a)

Shift left if equivalency in suffix/prefix according to deterministic nature of
the `pch` and `xch` terms.

i2 ∊ fin, a+promise

At any given time- three possible next actions:

R  ← left R right / middle

R` ← left{*i} 〈N=i〉middle right{N}




--------------------


If the results are not going to be consumed, then probably most of this can be
skipped in leueue of counters.





--------------------
b ← aaa/aa/a
  ← a(aa/a/ɛ)
  ← a(a(a/ɛ)/ɛ) 


----------------------
R ← aRaaa / aaR / a
----------------------
#=> 'aaaaa'

(aa(a))
# 'aaaa'
a(aa(a))aaa-fail


  ← a (Raaa / aR / ɛ)
        ^       
        ------------------
  #← a(a(Raaa / aR / ɛ) aaa / aR / ɛ)
  ← a(a((Raaa / aR / ɛ) aaa / R) / ɛ)

n0: ϝ
n1: (a)                  3
n2: ϝ
n3: (a a (a))            2(3)
n4: ϝ
n5: (a (a) a a a)        1(3)             (a a (a a (a)))
n6: ϝ
n7: (a (a a (a)) a a a)  1(2(3))
n8: 


--------------

R ← L:aRaaa
   / M:aaR
   / R:a
aaaaa

left-middle succeeded!!!

a(aa(a))a-fail
(aa(aa(a)))

a(a)aaa


- always give 3 a back if available, otherwise 1
- for L- to succeed 3 need to be available- ...

R    R2   R3   R4   R5   R6
L-a-(L-a-(L-a-(L-a-(L-a-(L-fail
                        /M-fail
                        /R-fail)fail
                   /M-a-fail
                   /R-a-succ)-fail
              /M-a-a-(L-fail
                     /M-fail
                     /R-fail)fail
              /R-a-succ)-a-fail
         /M-a-a-(L-a-(L-fail
                     /M-fail
                     /R-fail)fail
                /M-a-fail
                /R-a-succ)succ)-fail
    /M-a-a-(L-a-(L-a-(L-fail
                     /M-fail
                     /R-fail)-fail
                /M-a-fail
                /R-a-succ)-fail
           /M-a-a-(L-fail
                  /M-fail
                  /R-fail)fail
           /R-a-succ)succ)-a-fail
    /R-a-succ)



----------------------
R ← aRaaa / aaR / a
----------------------

a →         (a)
aa →         |
aaa →       (a a(a))
aaaa →       |
aaaaa →     (a(a a(a)))



--------
Hypothesis: memoization needed with recursion:
   Tail recursive   | never
   Left recursive   | specialized
   Middle recursive | ???


   ! Memoization required (or at least set up) if factoring is intractable.

--------------------
# Expected character consumption:

[x,y] !e →[x,y]     # Including, separately, all children
[x,y] &e →[x,y]     # Including, separately, all children
[x,y] e? →[x,y+|e|]
[x,y] e* →[x,inf]
[x,y] e  →[x+|e|,y+|e|]
[x,y] e+ →[x+|e|,inf]
[x,y]/e  →[min(x,|e|.x), max(y,|e|.y)]
[x,y]⑊e  →[min(x,|e|.x), max(y,|e|.y)]

if final answer is [inf,y] - it will never terminate

# TODO: Anything that can be infered from recursion.
#       That is, "R" level range.
#[x,y] e<he/ɛ →[x,inf]
#[x,y] e<he/r →[x+|r|,inf]
#[x,y] e<et/ɛ →[x,inf]
#[x,y] e<et/r →[x+|r|,inf]
#[x,y] e<het/ɛ

--------------------

R ← aRaaa / aaR / a
     #       ##    #-CONCRETE/RSUFF
     #       ##
     #-------##------RSUFF

R ← aRaaa / aaR / a
     #       ##    #-CONCRETE/RSUFF
     #       ##
     #-------##------RPREF

*** Theorem: A Rule R with no concrete term choices is a degenerate loop
*** Theorem: A Rule R where all r-prefixes are non-determinant may require memoization
*** Theorem: 

<R> = <aRaaa> / <aaR> / <a>
    = <[1,1]<R>[3,3]> # [4,4]
    / <[2,2]<R>>      # [2,2]
    / [1,1]           # [1,1]
      # x=1 (minimum of three first terms, which will never go down)
    = <[1,1][1,?][3,3]>
      <[2,2][1,?]>
      [1,1]

    = [5,?] / [3,?] / [1,1]

---
R ← a. R a. / a. R a. / a. / a.

R ← a. R a. R a. / a. R a. / a. R a. / a. / a.

prefix|recurse|suffix

recurse-point:
  - is follower
  - prefix
  - suffix
  - is leader


R ← abc R def R def / R asd / asdf R / lkj / z
         1     2       3            4

P1: 〈f,'abc','def',t〉
P2: 〈t,'def','def',f〉
P3: 〈f,ɛ,'asd',f〉
P4: 〈f,'asdf',ɛ,f〉


A ← 't' B 'u' A / 'f'
B ← 'v' C 'w' B?
  ← 'v' C 'w' B / 'v' C 'w'      ## TODO: Make sure this sort of trans. exists
C ← 'x' A / 'y' B / 'z' C

P(A) = [ 't' 'v'
         't'


*** Theorem: A self-referencing rule with no concrete clauses (after opt, plus,
and star expansions) never terminates.






A ← h A t / c
  ← h A t ⑊ c


A ← h^ (c) t^ / (c)

A ← l A m A r / c


A ← p1 A m1 A r1 / p2 A r2 / c1 / c2


success-determinant - anything that A will accept
path-determinant - sufficiently distinguishes every path in A

A ← a A a a / A



A ← aaaAa / aAa / a

  ← a (aa A a / A a / ɛ)

p(A)   = {a}
p(A,2) = p(aa A a) / p(A a)

longest static prefix



PREFIX
 Follows every seq item.
 Branches at every choice.
 Branch is done when it reaches the end of the grammar.
 Branch is done if it ever sees the same spot twice.
 If a branch consumes nothing it can be replaced with ɛ at the origin

A ← aaaAa / aAa / a
-+a--a--a--<
 +a--<
 +a-->

A ← B / C / D
B ← a B b / 1
C ← b C c / 2
D ← b b D d / 3

A-+-+-a--< a|1 <
  | \-1-->
  |
  +-+-b--< b|2 <
  | \-2-->
  |
  +-+-b-b-< b-b|3 <
    \-3->

{a,1,b(+|2),2,bb(+|2),3}

snap. what about left recursion then in this shorthand? Just a


A ← A [-] [0-9] / [0-9] [-] A / 't'

A-+-《 left(A)|[0-9][-]|t《
  +-[0-9]-[-]-《 left(A)|[0-9][-]|t《
  +-t->
*** Hypothesis: Despite any tricks, _should_ never work in a PEG _UNLESS_ a cycle is a
  failure. So declaring non-termination a failure gives us the advantage of
  making left-recursion well defined as well as other things... (?)


star expressions:

A   ← a b* c d / e f
    ← a S1 / e f
+S1 ← b S1 / c d

A ← a b* c d / e f
  ← a (b〈 b〈 / c d) / e f

A-+-a-+-b-<b<
  |   \-c-d-|
  \-e-f-|

det(A) = 〈ab[b], acd, ef〉
fac(A) = 〈a〈b,c〉,e〉

ɛ at the end of a choice simply goes up the stack to where it was headed anyway.


Each branch  
