%------------ Grammar -------------------------------------------------------|
peg_grammar   <- _S rule+ EOF                                           `?p2`;
rule          <- ENTRY? nonterm _S DEFINE _S expr _S
                 transform? _S RULE_DELIM?          `c_rule(?p1,?p2,?p6,?p8)`;

expr          <- pchoice / sequence / primary                               ~;

pchoice       <- alt (_S PCH alt)+              `{pch,?noattr,[?p1|?i(2,3)]}`;
alt           <- sequence / primary                                         ~;
sequence      <- primary ([,]? _S primary)+     `{seq,?noattr,[?p1|?i(2,3)]}`;

primary       <- prefix* atomic suffix*              `c_primary(?p1,?p2,?p3)`;
prefix        <- notp / andp / opt2                                         ~;
suffix        <- star / plus / opt                                          ~;
atomic        <- _S trans_pref?
                 (specials / ref / paren_expr / literal
                  / charclass) _S                                 `{?p2,?p3}`;

paren_expr    <- GRP_OPEN expr GRP_CLOSE                                `?p2`;
ref           <- nonterm !(_S DEFINE)                `{ref,?noattr,?e2(?p1)}`;

specials      <- any / eof / succ / fail / fin                              ~;
fin           <- "\\fin" !normal_sym / "‣"                 `{fin,?noattr,[]}`;
any           <- "\\any" !normal_sym / "."                `{chr,?noattr,any}`;
eof           <- "\\eof" !normal_sym                       `{eof,?noattr,[]}`;
succ          <- "\\epsilon" !normal_sym
               / "\\empty" !normal_sym
               / "ɛ" / "''" / '""'                         `{eps,?noattr,[]}`;
fail          <- "\\fail" / "ϝ" !normal_sym               `{fail,?noattr,[]}`;

nonterm       <- !TRANS (token_sym / normal_sym)                        `?p2`;
token_sym     <- [A-Z0-9_-]+ !normal_sym          `{token,?scan([$',?N,$'])}`;
normal_sym    <- [a-zA-Z0-9_-]+                  `{normal,?scan([$',?N,$'])}`;

literal       <- singlequoted / doublequoted
                                        `{lit,?noattr,list_to_binary(?scan)}`;
singlequoted  <- "'" not_squot* "'"                           `?fixlstr(?p2)`;
doublequoted  <- '"' not_dquot* '"'                                         ~;
not_squot     <- !"'" ("\\" . / .)                                      `?p2`;
not_dquot     <- !'"' ("\\" . / .)                                      `?p2`;

charclass     <- "[" range* char* "]"                `{chr,?noattr,?p2++?p3}`;
range         <- char "-" char                                    `{?p1,?p3}`;
char          <- (&. char_escapes) / (!"]" .)              `?scan(["$",?p2])`;
char_escapes  <- "\\^" [a-zA-Z] / "\\" o (o o?)? / "\\x{" h+ "}" /
                 "\\x" h h / "\\" .                                         ~;
o             <- [0-7]                                                      ~;
h             <- [0-9a-fA-F]                                                ~;

trans_pref    <- nonterm ':'                                            `?p1`;
transform     <- TRANS transexpr                                        `?p2`;
transexpr     <- _S (list / tuple / term)                               `?p2`;
list          <- empty_list / delim_list                                    ~;
empty_list    <- '[' _S ']'                                              `[]`;
delim_list    <- '[' transexpr transexpr* _S ']'                  `[?p2|?p3]`;
tuple         <- empty_tuple / delim_tuple                                  ~;
empty_tuple   <- '(' _S ')'                                              `{}`;
delim_tuple   <- '(' _S transexpr (_S transexpr)* _S ')'
                                               `list_to_tuple([?p3|?i(4,2)])`;
term          <- fun_call / pos_var / named_var / atom / literal            ~;
fun_call      <- (pos_var / named_var / atom)
                 '(' transexpr ')'                           `{call,?p1,?p3}`;
pos_var       <- '$' [0-9]+                               `?scan([$',?N,$'])`;
named_var     <- '$' [a-zA-Z_] [a-zA-Z0-9_]*              `?scan([$',?N,$'])`;
atom          <- [a-z] [a-zA-Z0-9_]*                      `?scan([$',?N,$'])`;

%------------ Lexical -------------------------------------------------------|
notp          <- "!" _S                                                `notp`;
andp          <- "&" _S                                                `andp`;
star          <- "*" _S                                                `star`;
plus          <- "+" _S                                                `plus`;
opt           <- "?" _S                                                 `opt`;
opt2          <- "_" _S                                                 `opt`;

GRP_OPEN      <- "(" _S                                          `'GRP_OPEN'`;
GRP_CLOSE     <- ")" _S                                         `'GRP_CLOSE'`;
PCH           <- "/" _S                                               `'PCH'`;
DEFINE        <- "<-" _S                                           `'DEFINE'`;
TRANS         <- "->" _S                                            `'TRANS'`;
ENTRY         <- ":" _S                                             `'ENTRY'`;
RULE_DELIM    <- ";" _S                                        `'RULE_DELIM'`;
EOF           <- !.                                                   `'EOF'`;
_S            <- S?                                                    `'_S'`; % Optional whitespace
S             <- (SPACE / NL)+                                          `'S'`; % At least one whitespace/newline
NL            <- COMMENT? NEWLINE                                      `'NL'`; % End of a line

% These build up the whiteSPACE rules above and should (I think) never be used
% except in those rules just above.
NEWLINE       <- "\n" / "\r\n" / "\r"                             `'NEWLINE'`;
SPACE         <- [ \t] / ML_COMMENT                                 `'SPACE'`;
COMMENT       <- "#" (!NEWLINE .)* &NEWLINE                       `'COMMENT'`;
ML_INNER      <- ML_COMMENT / (!"#|" !"|#" .)+                   `'ML_INNER'`;
ML_COMMENT    <- "#|" ML_INNER* "|#"                           `'ML_COMMENT'`;

%------------ Transforms / Helpers ------------------------------------------|
`
% [{rule,Name,RAttr,Body}]
% Body ::{Type,{Modifiers,MiscAttr},Value}
%  Type :: ref|pch|seq|lit|chr|any
%  Modifiers ::
%    Pref :: notp|andp
%    Suff :: star|plus|opt
%  MiscAttr :: [{Att,Val}]
%         Att :: entry -> true|false
%                drop  -> true|false
%
%                strans -> ParseTransform (success)
%                ftrans -> ErrorTransform (fail)

-define(noattr, [{i,?idx}]).

c_primary(Prefs, {[], {Type, CAttrs,Body}}, Suffs) ->
  {Type, Prefs++CAttrs++Suffs, Body};
c_primary(Prefs, {{_,Tag}, {Type, CAttrs,Body}}, Suffs) ->
  {Type, Prefs++CAttrs++Suffs++[{orig_tag, Tag}], Body}.

c_rule(Entry,{NType,Name},Expr,Trans) ->
  OrigProp  = case Entry of 'ENTRY' -> {entry,Name}; _ -> {orig,Name} end,
  TokProp   = case NType of token -> token; _ -> [] end,
  TransProp = case Trans of [] -> []; _ -> {trans,Trans} end,
  {rule, Name, lists:flatten([OrigProp,TokProp,TransProp]), Expr}.



%------------ Misc Helpers --------------------------------------------------|

-define(idx, {line(Index),column(Index)}).
-define(N, Node).
-define(pos, line(Index)).
-define(e1, ?e1(?N)).
-define(e2, ?e2(?N)).
-define(e3, ?e3(?N)).
-define(p1, ?p1(?N)).
-define(p2, ?p2(?N)).
-define(p3, ?p3(?N)).
-define(p4, ?p4(?N)).
-define(p5, ?p5(?N)).
-define(p6, ?p6(?N)).
-define(p7, ?p7(?N)).
-define(p8, ?p8(?N)).
-define(flat, ?flat(?N)).
-define(rev, ?rev(?N)).
-define(e1(T), element(1,T)).
-define(e2(T), element(2,T)).
-define(e3(T), element(3,T)).
-define(p1(L), lnth(1,L)).
-define(p2(L), lnth(2,L)).
-define(p3(L), lnth(3,L)).
-define(p4(L), lnth(4,L)).
-define(p5(L), lnth(5,L)).
-define(p6(L), lnth(6,L)).
-define(p7(L), lnth(7,L)).
-define(p8(L), lnth(8,L)).
-define(i(OPos,IPos), [lnth(IPos, IL)||IL<-lnth(OPos,?N)]).
-define(flat(L), lists:flatten(L)).
-define(rev(L), lists:reverse(L)).
-define(scan,?scan(?N)).
-define(scan(V), % For simple terms that the erlang scanner can handle (most atomic literals)
  case erl_scan:string(?flat(V),?pos) of
    {ok, [One], _} -> element(3,One);
    {ok, Tokens, _} ->
      {ok, Parsed} = erl_parse:parse_term(Tokens ++ [{dot,?pos}]),
      Abs = erl_parse:abstract(Parsed);
    Err -> throw(Err)
  end).
lnth(Pos, L) ->
  case (catch lists:nth(Pos,L)) of
    {'EXIT',_}->[];
    O->O
  end.

-define(fixlstr, ?fixlstr(?N)).
-define(fixlstr(N), ["\"", rm_char($","\\\"",?flat(N)), "\""]).
% Remove (or replace) a character
%rm_char(C,L)        ->rm_char(C,[],L,[]).
rm_char(C,R,L)      ->rm_char(C,R,L,[]).
rm_char(_,_,[],A)   ->?flat(?rev(A));
rm_char(C,R,[C|T],A)->rm_char(C,R,T,[R|A]);
rm_char(C,R,[H|T],A)->rm_char(C,R,T,[H|A]).
% vim: set noai filetype=erlang textwidth=100:
`
