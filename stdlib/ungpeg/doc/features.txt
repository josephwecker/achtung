 - Only memoize when it's truly necessary, and remove memoized entry at the
   earliest possible time.

 - Multiple entry-points designated (e.g.-> module,form,expression,term)
 - Allow appending to warning stack in parse-transform
 - Allow error-transform clause that is given the error(s)
 - pegexps (peg expressions - single line pegs sharing some syntax w/ regex's
   for easily doing things like nested parens etc.)
   # Specials: (,),.,%,/,\,*,+
   # Str = p-/"(!"(\\\\/\\"/.))*"/- # String with escapes
   # Par = p-/\((!\)(./%1))*\)/- # Matched parenthasese

   - pegexps - finally a way to do !'blah' ...

 - parameterized rules (like a preprocessor to abstract certain patterns- use
   for example to have one string-matcher that is given single-quotes or
   double-quotes.
 
 - convention over configuration for parse and error transforms- simply looks
   for a fun with the same name as the rule (and checks to see if it handles a
   "fail" case as well)

 - Semantic predicates in addition to transformations (allow it to return its
   own error).
 - Current generic state available in all transformations and semantic
   predicates.

 - BINARY MATCHING (ala erlang)

 - Call any erlang function as long as it returns either a ɛ or ϝ statement
   (and new state etc.) (those can, in turn, of course, call other rules as if
   they were standard functions, which, combined with parameters, essentially
   gives us unlimited adaptability)

 - Parameterized rules with pattern-matching

 - Focus on runtime creation facilities (which implies things like variable
   interpolation within the rule definitions etc.) - and only secondarily on
   'compiler' creation...

 - Basic 'assert' as a semantic predicate using state / context etc. (with
   ability to do good error message)

 - Definitely need some plans for fault tolerance:
   - Error recovery! Ad-hoc program can analyze the error message, position,
     characters remaining, etc.- and decide it can CONTINUE - jumps back in
     with all state and context (possibly modified) intact.

--------------------- PEG

 - Tail recursion on all star expressions means no memory usage for
   backtracking them.
