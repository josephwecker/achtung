Ungpeg Parsing Expression Grammars
==================================
Joseph Wecker <joseph.wecker@gmail.com>

== PEG Normalization

=== Definitions

==== Expression Types

call:: `some_rule` - A reference to another rule to be invoked
seq:: `a b c` - Sequence. A space delimited list of sub-expressions, invoked
sequentially, that fails if any of the sub-expressions fail.
ord:: `a/b/c` - Ordered choice. A forward-slash delimited sequence of
sub-expressions that are evaluated only until one succeeds. A prioritized
choice sequence.
exord:: `a;b;c` - Exclusive ordered choice. A specialized +ord+ where the first
sub-expression to begin to succeed determines the overall result of the
expression. Intended to be used only internally by the system.
succ:: `succ` - Always succeeds consuming nothing- also known as the empty
string.
any:: `. or any` - Matches and consumes the next available input
eof:: `!. or eof` - Matches the end of all input

sub:: Shorthand for sub-expressions.

==== Prefixes / Predicates

notp:: `!e1` - Not predicate, fails if e1 succeeds, consumes nothing
andp:: `&e1` - And predicate, succeeds if e1 succeeds, consumes nothing

==== Suffixes

star:: `e1*` - Kleene star, greedily consumes zero or more of +e1+, always
succeeds
plus:: `e1+` - Greedily consumes 1 or more of +e1+, failing if there are none.
opt:: `e1?` - Consumes zero or 1 of +e1+, always succeeds


=== Applicable to all

. Every +call+ inlined except entry-points, recursive calls, and accumulators.
. All prefixes (predicates) and suffixes operating on the same expression are
  reduced (see below).
. All `+` expressions normalized to `*` expressions.
. 

