[ ] Opt backtracking/memoizing elimination
[ ] Multi backtracking/memoization elimination
[ ] Predicate backtracking/memoization elimination
[ ] Parse transforms and aggregation
[ ] Left recursion

--- Detailed
[ ] In transformation area of grammar, implied tuples when no brackets (e.g.,
    `a <- 'ab' 'cd' -> $1 $2`)
[ ] Redo specials as succ/fail
[ ] Alternate token versions of specials (esp EOF etc.)
[ ] Detect bad character ranges (ranges in the wrong order)
[ ] Fix it so it correctly discovers all entrypoints again
[ ] Ungpeg warning/error/info/debug mechanisms (inc. flags & macros)
[ ] Beginning of format_error function
[ ] Attribute and basic list normalization
[ ] Pure inlined recursive at first- pull out additional entrypoints after all
    the transformations- or mark the call as recurse, to simplify
    left-recursion algorithm.  (the latter, so that distinct grammars can be
    combined and it'll work correctly - that is, entry points to expressions
    that don't overlap with other entry points' instructions).

--- Future / Undecided
[?] "self" call special (and maybe even a term_self)
[ ] Some way to get rid of redundant bs_test_unit calls in opcodes?
[?] Let expr_map[fold] go deep- keep it's own "seen calls" dict and always
    follow a call the first time.
[?] (Based on new expr_map) - find tags deeply - make sure they get marked
    with correct tag though (based on the rule where it gets used, not on the
    rule where it is found) etc.
[?] Figure out panic-mode (skip ahead) error recovery

--- Finished
[D] Fix unicode / wide character consumption / comparing & byte_size in
    compiler writer.
[D] Input line-numbers in parse tree
[D] Left recursion algorithm decided on etc.
    - http://pages.cpsc.ucalgary.ca/~robin/class/411/LL1.3.html
    - www.d.umn.edu/~hudson/5641/l11m.pdf
[D] Fix ungpeg_n so that it's ok with 'Blah' styled names
[D] Syn highlight for proposed parse-transform stuff
[D] Change parser etc. so that new entry-point marker is ':'
[D] Change parser etc. so that it allows optional rule delimiter ';'
[D] Capture transformation phrases
[D] Ability to tag items
[D] In transformer, swap out "orig" for all relevant tags before inlining
