@module urlget
@export [test direct proxy get_http/5]


test
  |1|-> direct("http://www.ericsson.se/cslab/~joe")
  |2|-> direct("http://www.viasat.se/index9.html")
  |3|-> proxy("http://www.ericsson.se/cslab/~joe")
  |4|-> proxy("http://www.viasat.se/index9.html")

direct|URL|->
  case get_http(progress/2 URL [] noproxy 60000)
    |(ok (URL Reply Head Body))|-> (ok (URL Reply Head list(Body)))
    |Other                     |-> Other

proxy|URL|->
  case get_http(progress/2 URL [] ("proxy" 82) 60000)
    |(ok (URL Reply Head Body))|-> (ok (URL Reply Head list(Body)))
    |Other                     |-> Other

progress
  |not_known Y |-> info("progress:#bytes = ~p~n" [Y])
  |(length N) Y|->
    K = trunc(Y*100/N)
    info("progress:#bytes (~w\%) = ~p~n" [K Y])

get_http
  |Fun URL Opts Proxy Timeout|->
    case get_ip_port(URL Proxy)
      |(ok (IP Port Url0))|->
        Cmd = ["Get " Url0 " HTTP/1.0\r\n" Opts "\r\n"]
        get_http(Fun URL IP Port Cmd Opts Proxy Timeout)
      |Other|-> Other
  |Fun URL IP Port Cmd Opts Proxy Timeout|->
    info("Here connect:~p ~p~n" [IP Port])
    case gen_tcp.connect(IP Port [binary (packet 0)])
      |(error Why)|-> (error (socket_error Why))
      |(ok Socket)|->
        ok = gen_tcp.send(Socket Cmd)
        Return = case receive_header(Fun URL binary([]) Socket Timeout)
          |(redo URL1)|-> get_http(Fun URL1 Opts Proxy Timeout)
          |Other      |-> Other
        ok = gen_tcp.close(Socket)
        Return

get_ip_port|URL Proxy ->
  case Proxy
    |noproxy|-> case parse(URL)
      |(error Why)        |-> (error (badURL (Why URL)))
      |(http IP Port URL0)|-> (ok (IP Port Url0))
      |Other              |-> (error (unknown Other))
    |(IP Port)|-> (ok (IP Port URL))

receive_header|Fun URL Bin Socket Timeout ->
  receive
    |(tcp Socket B) ->
      B1 = concat_binary([Bin B])
      case get_header(B1)
        |more -> receive_header(Fun URL B1 Socket Timeout)
        |(ok Reply Header BT) ->
          Size = content_length(Header)
          case get_field(Header "Location")
            |(true URL1) ->
              # If it's redo we still have to get the body to flush the socket
              case receive_body(Fun Size BT Socket Timeout)
                |ok Body -> (redo URL1)
                |Error   -> Error
            |_ -> case receive_body(Fun Size BT Socket Timeout)
              |ok Body -> (ok (URL Reply Header Body))
              |Error   -> Error
    |(tcp_closed Socket)       -> (error socket_closed_in_header)
    |(tcp_error Socket Reason) -> (error Reason)
    |Other                     -> (error (socket Other))
  after|Timeout -> (error timeout)

receive_body|Fun Size Bin Socket Timeout ->
  receive
    |(tcp Socket B) ->
      B1 = concat_binary([Bin B])
      Fun(Size size(B1))
      receive_body(Fun Size concat_binary([Bin B]) Socket Timeout)
    |(tcp_closed Socket) -> (ok Bin)
    |(tcp_error Socket What) -> (error (socket What))
    |Other -> (error (socket Other))
  after
    |Timeout -> (error timeout)

get_header|B->
  case split_header(list(B),[])
    |(ReplyHeader Rest) ->
      (Reply Header) = parse_reply(ReplyHeader)
      (ok Reply parse_header(Header) binary(Rest))
    |fail -> more

split_header
  |["\r\n\r\n"|T] L ->>
  |["\n\n"|T]     L -> (reverse(L) T)
  |[H|T]          L -> split_header(T [H|L])
  |[]             L -> fail

get_field
  |[(K V)|T] K -> (true V)
  |[_|T] K     -> get_field(T K)
  |[] _        -> (false false)

parse_reply|R0 ->
  (HTTP R1) = get_until(R0 $   [])
  (CODE R2) = get_until(R1 $   [])
  (COMM R3) = get_until(R2 $\n [])
  ((trim(HTTP), int(trim(CODE)), trim(COMM)) R3)

get_until
  |[R|Rs] R L -> (reverse(L) Rs)
  |[R|Rs] P L -> get_until(Rs P [R|L])

parse_header
  |T               -> (_ P) = parse_header(T []); P
  |["\r\n"|T] Info -> header_end(T Info)
  |["\n"|T] Info   -> header_end(T Info)
  |Cs Info         -> header_line(Cs [] Info)

header_line
  |["\r\n"|T] Acc Info ->>
  |["\n"|T]   Acc Info -> parse_header(T [split_info(reverse(Acc))|Info])
  |[C|Cs] Acc Info     -> header_line(Cs [C|Acc] Info)
  |[] Acc Info         -> header_end([] [split_info(reverse(Acc))|Info])

header_end
  |["\r\n"|T] Info ->>
  |["\n"|T] Info   -> header_end(T Info)
  |T Info          -> (T Info)

split_info|String ->
  case  string:chr(String, $:) of
    |0  -> ("Parse-Error" trim(String))
    |Ix -> (trim(string.substr(String,1,Ix-1))
            trim(string.substr(String,Ix+1,length(String))))

strip
  |[$  |Cs] ->>
  |[$\t|Cs] ->>
  |[$\r|Cs] ->>
  |[$\n|Cs] -> strip(Cs)
  |Cs       -> Cs

content_length|Header->
  case get_field(Header "Content-Length")
    |(true Str)-> (length, int(Str))
    |(false _) -> not_known

parse
  |["http://"|T] -> parse_http(T)
  |["ftp://"|T]  -> (error no_ftp)
  |["file://"|F] -> (file F)
  |X             -> (error unknown_url_type)

parse_http|X->
  case string.chr(X $/)
    |0 -> parse_http(X++"/") # Not terminated by "/"- try again
    |N ->
      # The Host is up to the first "/"
      # The file is everything else
      Host = string.substr(X,1,N-1)
      File = string.substr(X N length(X))
      # Now check to see if the host name contains a colon
      # i.e. there is an explicit port address in the hostname
      case string.chr(Host $:)
        |0 -> (http Host 80 File) # No colon
        |M ->
          Site = string.substr(Host,1,M-1)
          case catch(int(string.substr(Host,M+1,length(Host))))
            |('EXIT' _) -> (http Site 80 File)
            |Port       -> (http Site Port File)
