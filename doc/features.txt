------------------- High level (all need to be awesome)
- Standalone compiler with no/few dependencies
- Shell
- Module with equivalent of:
  - parse_file -> Erlang parse tree
  - parse_string -> Erlang parse tree
  - parse_forms -> Erlang parse tree
  - compile -> Result (depends on flags)
  - preprocess -> ?
  - file:consult -> List of terms
- Manpages / html / pdf documentation
- Commandline completion

------------------- Language

Maybe triple back-ticks or something breaks into erlang?

Errors / Warnings
 - ungbarc level - can't open files, create directories, etc.
 - Neotoma parser can't find a way through
 - Semantic issues- like multiple module definitions: Erlang-based
 - Semantic issues that are only Ungbar related
 - Erlang warnings (like terms that are created but not used
 - Erlang-ish but enhanced: e.g., No functions were exported
 - Possibly lower-level errors during parsing that would need to get handled
   better (don't have examples at the moment)


list-of-lists (esp list of strings) with its own stdlib functions /
  special-module

@export *

dot-syntax for parameterized modules or specialized p-modules for lists/strings
and other core data-types.
	Mylist.reverse().append([3])
	Mydict.fetch_keys()
	MyModName.FunName()  # MyModName having just an atom / chained atom
	MyArray[0]
	MyList[3]
	MyString[-/^http://www\./-]

	B = utils.binqueue.new()    #  B  = utils.binqueue:new().
	B2 = B.append(<<"heya">>)   #  B2 = B:append(...). % B2 = do_call(B,append,[<<"heya">>])
	A = B2[0]                   #  A  = B2:array_access([{0,integer}]).

	[1,2,3].reverse()
	123.abs()

  (Way to distinguish between a parameterized module variable and a normal
  tuple?)

  Some way to do same thing as array_access, but for list-comprehensions?

  Super-module:
    - Parameterized with parameter holding main state
    - ung_array_access
    - ung_to_list
    - ung_unknown_function

shorthand case syntax:   case(Term)|one->blah|two->beh|three->doof;

Fixed "extends" implementation (so that children can override parent behavior
even when it's called by the parent).

blah[n] syntax that translates into nth(blah) and nth is either lists:nth(...)
or element(...)

Make hot code swapping & other OTP stuff really obvious...  (like
ungbar-update-code or something)

Guard combiner:
  in(Var LiteralListOrString)
  (e.g.,)
  in(C "12345") ==>  C==$1 or C==$2 or C==$3 ...
  maybe `C in "12345"` instead...

Some kind of lesser export for OTP callback functions like gen_server callbacks
- better yet, make the OTP ones automatic...

?"do" subblocks (to replace begin/end) (could also be called "block" or "begin")

If statement that puts its own "true ->" part on the end of the clauses

Cascading clauses:
  |blah ->>
  |another -> ok

  The atoms blah and another both return "ok".  They have to bind the same
  variables or error is thrown.

Function calls:
  Possibly still module:function but then allow .blah(x).blah(x) etc. that is
  the equivalent of efn/ifn small-arrow syntax(?)

Implement a lot of the features with macro language (astify etc.)

Sequence syntax
Struct
Structs coexisting with Parameterized modules:
   Mystruct.field   ->  value or false (so shortcircuits work)
   Mypmod.function(blah) -> no problem - Mypmod holds module name
   Mystruct.funfield(blah) -> hm.... Send off to an inline function to resolve?
   Struct.anotherone.another.blah -> nested structs
   Var.package.Dir.yeah(blah)  -> Variables hold atoms...

   Really it comes down to this:  If a variable is holding a list, it's a
   struct- if it's holding an atom, then it needs to be treated as such...
   Does it need to be resolved at compile/parse time?  or can it be deferred to
   runtime.  If runtime we have the following additional (obscure) option:
   >> somefunction(StructOrModule)-> StructOrModule.runme(yeah)
   which begins to lead to somehow, conceptually, the unification of the two...
   which is kind of scary and weird...

   Something.function_name(...)

   function_name -> A function that either operates on that data type, a field
   from a struct (same thing?), or a function exported from that module...

   When "Something" is a:
   module -> function_name is exported function
   struct -> function_name is a member variable with a fun
   list -> function_name is a function that takes a list as the first argument
     and that is from a module specifically for that data-type (@for list) or
     is defined locally or explicitly imported


Dashes in atom names (and therefore function-names)?
[DONE??] Questionmarks in atoms and therefore function-names - also variables?

[DONE] Whitespace deliniated lists
[DONE??] Dangling commas in lists

"Built-in" regular expressions (compiles re at compile-time)
String interpolation  ("blah ~s" ~ MyStr) or ("blah ~b ~s" ~ [123, MyStr])

Ternary expressions (or maybe just a builtin function)
Shortcuts for type conversion functions (make polymorphic)
Shortcut guard expressions
  - allow '?' at end of function defs
  - is_list()  -> l?() etc.
  - some_fun|Blah:atom, etc

[DONE] Clean and easily nested record syntax

Perhaps an ungbar specific include-file syntax for parse-tranforms, stdlib
  transforms, etc. etc.
 
== Basic libraries ==
Way better string & binary string library
Wrap around things like ~p and other pretty-print / basic string IO for the
    shell.

== Higher level libraries ==
Redis? http-bridge?

== Tools ==
Drop-in erlc replacement
Drop-in erl replacement ?
Super better shell
Easy way to extend standard library systemwide

== Don't know yet... ==
Take any spec/type or combo and turn it into a (possibly deeply nested) guard
  sequence?
Override operators (?)
Syntax for function parameter defaults?
More common use of packages?
Special reassign variable syntax (like Var! or something) that is essentially
  going to turn into a parsing hack, but allows redefinition when it really
  makes sense...?
  Var := new_value


@import that allows any imported functions to be compile-time and allows them
to do parse transforms ... ...




Expression ->
  Term -> Data (Number, Atom, List, Tuple, ...)
  Variables -> Hold a term value (after bound)
  Pattern -> like Term but with unbound variables
  Match -> Assignment with pattern matching.  Pattern = Term
  Function Calls ->
  Fun Expressions ->
  If
  Case
  Send
  Receive
  Term Comparisons
  Arithmetic
  Boolean & shortcircuit
  List Operations
  Binary Operations
  Catch and Throw
  Try
  Parenthesized Expression
  Block Expression (similar to clause body)
  List comprehension
  Binary comprehension
  Guard sequence


 <  >
 {  }
 [  ]
 (  )
 |  |
<[  ]>
<<  >>


