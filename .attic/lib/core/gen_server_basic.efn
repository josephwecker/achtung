##-----------------------------------------------------------------------------
## @title     gen_server_basic - Parent for quick gen_servers
## @doc       Extend this module to get the basic (passthrough) gen_server
##              functionality- then simply implement any of the calls (and make
##              them public) that you will actively use.
## @author    Joseph Wecker <joseph.wecker@gmail.com>
## @copyright 2010 Joseph Wecker
## @license   Simplified BSD License
##-----------------------------------------------------------------------------

## @doc Helper that points to the parent (this module). sometimes not easy to
##        use though... Working on it.
<super: $module

## @doc Simplified start (which you still need to call from the inherited
##        module)- assumes start_link, allows global or local, a name separate
##        from the module if desired and of course anything to pass in
<start|Module|:                      start(Module, [])
<start|Module, Opts|:                start(local, Module, Opts)
<start|Context, Module, Opts|:       gen_server.start_link((Context, Module), Module, Opts, [])
<start|Context, Name, Module, Opts|: gen_server.start_link((Context, Name), Module, Opts, [])
<start_anon|Module, Opts|:           gen_server.start_link(Module, Opts, [])

## @doc Stops the server.  If you override handle-cast and want this to keep
##      working you'll need to implement it.")
<stop|Name|: gen_server.cast(Name, stop)
#<stop: gen_server.cast(N, stop)

##### gen_server callbacks

<init|Opts|: (ok, Opts)
<handle_call|stop,    _From, State|: (stop, normal, stopped, State)
<handle_call|Request, _From, State|
  error_logger.warning_msg("Unhandled call: ~p", [Request])
  (reply, ok, State)

<handle_cast|Msg, State|
  error_logger.warning_msg("Unhandled cast: ~p", [Msg])
  (noreply, State)

<handle_info|Info, State|
  error_logger.warning_msg("Unhandled info: ~p", [Info])
  (noreply, State)

<terminate|_Reason, _State|: ok

<code_change|_OldVsn, State, _Extra|: (ok, State)
