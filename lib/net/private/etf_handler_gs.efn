# One of these is started for every connection - basically handles state and
# communications with that single client.

@@extends(gen_server_basic)

<send|State, Dat|
  S = State.sock
  # An uncompressed binary wraps the real term so that we have the full size on
  # the client side without having to do zlib stuff.
  Encoded = term_to_binary(term_to_binary(Dat, [compressed => 4, minor_version => 1]))
  @S.send(Encoded)

<init|[Server, Sock, Opts]|
  State =
    sock:   Sock,
    opts:   Opts,
    server: Server,
    acc:    <[ ]>
  (ok, State)

<handle_info|set,                 State|: (noreply, State)
<handle_info|shutdown,            State|: (stop, normal, State)
<handle_info|(tcp_closed, _),     State|: (stop, normal, State)
<handle_info|(tcp, _RSock, <["TESTDAT\r\n"]>), State|
  send_test_data(State)
  (noreply, State)
<handle_info|(tcp, _RSock, Data), State|
  Acc = State.acc
  #NewAcc = process_data(Data, State.opts.recipient, Acc)
  NewAcc = process_data(Data, none, Acc)
  (noreply, State.acc := NewAcc)

<handle_info|Outbound, State|
  send(State, Outbound)
  (noreply, State)

<terminate|_Reason, State|
  Server = State.server
  Server.rm_persistent(self())
  S = State.sock
  @S.close()

process_data|New, _, Acc|:
  io.format("Got data: ~p", [New])
  [Acc, New]  # which is to say, nyi


## @doc Sends a bunch of encoded data types in order to help the client test.
## The following are not sent out because they are not needed:
##  - FLOAT_EXT           (deprecated old float)
##  - REFERENCE_EXT       (deprecated old reference)
##  - FUN_EXT             (deprecated old fun)
##
##  - PORT_EXT            (can't create one easily- too lazy- might implement later)
##  - SMALL_BIG_EXT       (clients won't really support it)
##  - LARGE_BIG_EXT       (clients really won't really support it)
##
##  - Distribution Header (doesn't apply to term_to_binary (?))
##  - SMALL_ATOM_EXT      (would love to, but term_to_binary doesn't use it)
##  - ATOM_CACHE_REF      (can't get term_to_binary to use it)
##
send_test_data|State|
  # Basic types
  send(State, [])                    # Nil / Empty List
  send(State, 1)                     # Small Int
  send(State, 0xffffff)              # Int
  send(State, -4)                    # Negative small int
  send(State, -968)                  # Bigger negative int
  send(State, an_atom)               # Atom
  send(State, spawn(fn(){[]}))       # PID
  send(State, ([], [], []))          # Small Tuple
  send(State, list_to_tuple(1..257)) # Large Tuple
  send(State, "string")              # String
  send(State, [[], []])              # List (normal)
  send(State, [1:2])                 # List (improper)
  send(State, <["binary"]>)          # Binary
  send(State, make_ref())            # Reference (new)
  send(State, fn(1){[]})             # Fun (new)
  send(State, fn math.pow:2)         # Export
  send(State, <[2:2]>)               # Bit Binary
  send(State, 990.0)                 # Float (new)

  # Combinations
  send(State, [hey => there, <["partner!"]>, 7])
  send(State, ("Whatever", [], none, null, ok))
  send(State, [([(atomish), []], "There you go"), 332.778, 96..120])
  send(State, 1..900) # Large Tuple
  send(State, list_to_tuple(1..900)) # Large Tuple

#process_data|_Server, Buff, [] |: binary_to_term(Buff, [safe])
#process_data|Server,  Buff, New|
