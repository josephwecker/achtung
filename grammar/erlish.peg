
grammar    <- tl_exprs S `p1(Node)`;

% Toplevel expressions
tl_exprs   <- (S attrs eos)* `[p2(A)||A<-Node]`;
attrs      <- module ~;
module     <- "@module" sp n:atom ("." n:atom)* params:list_expr?
                `Mod = case all(n, Node) of [M] -> M; L -> L end,
                 case all(params, Node) of
                   [] -> {attribute, ?L, module, Mod};
                   [Params] -> {attribute, ?L, module, {Mod, Params}}
                 end`;

% Expressions
expr       <- S (variable / atom / list_expr) `p2(Node)`;

% Lists
list_expr  <- S (null_list / nlist_expr / wlist_expr) `p2(Node)`;
% Empty list is actually its own data type in Erlang Abstract
null_list  <- "[" S "]" `{nil, Index}`;
% List with comma delimiters- allows dangling comment
nlist_expr <- "[" x:expr? (S "," x:expr)* S ","? S "]" `all(x,Node)`;
% List with spaces as delimiters
wlist_expr <- "[" x:expr (s x:expr)+ S "]" `all(x,Node)`;

% Variables
variable   <- [A-Z] [a-zA-Z0-9_]* `a(Node)`;

% Atoms
atom       <- [a-z] [a-z0-9_]* `a(Node)`;

% Whitespace, newlines, end-of-statements, comments and block comments
S          <- s?                                `[]`; % Optional ws
s          <- (sp / comment / nl)+              `[]`; % Required ws
eos        <- sp? (nl / [:;] / comment / !.)    `[]`; % End of Statement
ml_begin   <- "#|"                              `[]`;
ml_end     <- "|#"                              `[]`;
ml_comment <- ml_block / (!ml_begin !ml_end .)+ `[]`;
ml_block   <- ml_begin ml_comment* ml_end       `[]`;
comment    <- "#" (!nl .)* &nl                  `[]`;
nl         <- ("\r\n" / "\n" / "\r")+           `[]`;
sp         <- space+                            `[]`;
space      <- [ \t] / ml_block                  `[]`;
indent     <- "\x06"                            `[]`;
dedent     <- "\x15"                            `[]`;


% Shortcut & helper functions
`
-define(L, line(Index)).

flat(L)     -> lists:flatten(L).
all(Key, L) -> proplists:get_all_values(Key, flat(L)).
a(L)        -> list_to_atom(flat(L)).
p1([R|_])   -> R.
p2([_,R|_]) -> R.


% vim: set noai filetype=erlang textwidth=100:
`
