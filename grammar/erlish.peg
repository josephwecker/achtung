
grammar    <- tl_exprs S;

tl_exprs   <- (S attrs eos)* ~;
attrs      <- module ~;
module     <- "@module" sp atom ("." atom)* (S list_expr)? ~;

%expr       <- S (list_expr / atom / variable) ~;

%list_expr  <- "[" expr? ("," expr)* "]" ~;
%list_expr  <- ("[" S "]") / ("[" expr? ("," expr)* "]") ~;

%list_expr  <- "[]" ~;

expr       <- S (variable / atom) ~;

% Lists
list_expr  <- null_list / nlist_expr / wlist_expr ~;
null_list  <- "[" S "]" `{nil, Index}`;
nlist_expr <- "[" x:expr? (S "," x:expr)* S ","? S "]" `[N||[_,N]<-all(x,Node)]`;
wlist_expr <- "[" x:expr (s x:expr)+ S "]" `[N||[_,N]<-all(x,Node)]`;

% Variables
variable   <- [A-Z] [a-zA-Z0-9_]* `a(Node)`;

% Atoms
atom       <- [a-z] [a-z0-9_]* `a(Node)`;

% Whitespace, newlines, end-of-statements, comments and block comments
S          <- s?                                `[]`;
s          <- (sp / comment / nl)+              `[]`;
eos        <- sp? (nl / [:;] / comment / !.)    `[]`;
ml_begin   <- "#|"                              `[]`;
ml_end     <- "|#"                              `[]`;
ml_comment <- ml_block / (!ml_begin !ml_end .)+ `[]`;
ml_block   <- ml_begin ml_comment* ml_end       `[]`;
comment    <- "#" (!nl .)* &nl                  `[]`;
nl         <- ("\r\n" / "\n" / "\r")+           `[]`;
sp         <- space+                            `[]`;
space      <- [ \t] / ml_block                  `[]`;
indent     <- "\x06"                            `[]`;
dedent     <- "\x15"                            `[]`;


% Shortcut & helper functions
`
flat(L)     -> lists:flatten(L).
all(Key, L) -> proplists:get_all_values(Key, flat(L)).
a(L)        -> list_to_atom(flat(L)).

% vim: set filetype=erlang textwidth=100 noautoindent nocindent nosmartindent:
`
