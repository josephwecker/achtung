%------------ Grammar --------------------------------------
grammar       <- (_s form)* _s            `[p2(F)||F<-?N1]`;
form          <- attribute / function                     ~;

%------------ Attributes -----------------------------------
attribute     <- module                      `{attr, Node}`;
module        <- "@module" sp atom                    `?N3`;

%------------ Functions ------------------------------------
function      <- atom expression     `{function, ?N1, ?N2}`;

%------------ Terms / Atomic Literals ----------------------
term          <- atom                                     ~;
atom          <- simple_atom                              ~;
simple_atom   <- [a-z] [a-z0-9_]*                 `a(Node)`;

%------------ Expressions ----------------------------------
expression    <- _s (block / single_expr)             `?N2`;
block         <- "|block|"                                ~;
single_expr   <- term eos                             `?N1`;
eos           <- _sp (";" / newline / !.)              `?X`;

%------------ Comments & Whitespace ------------------------

_s            <- ws?                                   `?X`;
ws            <- (newline / space)+                    `?X`;
newline       <- "\n" / "\r\n" / "\r"                  `?X`;
_sp           <- sp?                                   `?X`;
sp            <- space+                                `?X`;
space         <- [ \t]                                 `?X`;

%------------ Shortcut / helper functions ------------------
`
-define(L,       line(Index)).
-define(N1,      p1(Node)).
-define(N2,      p2(Node)).
-define(N3,      p3(Node)).
-define(X,       []).

flat(L)       -> lists:flatten(L).
all(Key, L)   -> proplists:get_all_values(Key, flat(L)).
a(L)          -> list_to_atom(flat(L)).
p1([R|_])     -> R.
p2([_,R|_])   -> R.
p3([_,_,R|_]) -> R.

% vim: set noai filetype=erlang textwidth=100:
`
